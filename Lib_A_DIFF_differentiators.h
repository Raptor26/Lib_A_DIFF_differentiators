/*
 * Lib_A_DIFF_differentiators.h
 *
 *  Created on: 2 февр. 2018 г.
 *      Author: m.isaev
 */

#ifndef LIB_A_DIFF_DIFFERENTIATORS_H_
#define LIB_A_DIFF_DIFFERENTIATORS_H_


/******************************************************************************/
//  Секция include (подключаем заголовочные файлы используемых модулей)
/*============================================================================*/
//  Стандартные библиотеки языка С
#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
/*============================================================================*/


/*============================================================================*/
//  Библиотеки для работы с периферией микроконтроллера
/*============================================================================*/


/*============================================================================*/
//  Внешние модули
/*============================================================================*/
/******************************************************************************/


/******************************************************************************/
//  Секция определения констант
#if !defined (__DIFF_FPT__)
#error "Please, set __DIFF_FPT__ = 'f' or 'd'"
#endif

/* Если __DIFF_FPT__ равен float */
#if 	(__DIFF_FPT__ == 	'f')
#undef 	__DIFF_FPT__
#define __DIFF_FPT__		float

/* Если __DIFF_FPT__ равен double */
#elif 	__DIFF_FPT__ == 	'd'
#undef  __DIFF_FPT__
#define __DIFF_FPT__		double
#endif
/******************************************************************************/


/******************************************************************************/
//  Секция определения типов
typedef enum
{
	DIFF_ERROR = 0,
	DIFF_SUCCESS,
} diff_fnc_status_e;

/**
 * @brief	Структура содержит поля для функции, выполняющей дифференцирование
 *  		методом 1-го порядка;
 */
typedef struct
{
	/**
	 * @brief	Частота дифференцирования (величина,
	 *          обратная периоду интегрирования);
	 */
	__DIFF_FPT__ freq;

	/**
	 * @brief	Значение дифференцируемой переменной на предыдущем шаге;
	 */
	__DIFF_FPT__ preValue;

	/**
	 * @brief	Статус инициализации структуры данных
	 */
	diff_fnc_status_e initStatus;
} diff_differentiator_1_s;

typedef struct
{
	/**
	 * @brief	Период дифференцирования
	 */
	__DIFF_FPT__ dT;
} diff_differentiation_1_init_struct_s;
/******************************************************************************/


/******************************************************************************/
//  Секция определения глобальных переменных
extern __DIFF_FPT__
DIFF_GetDifferent1
(diff_differentiator_1_s *pStruct,
 __DIFF_FPT__ value);

extern diff_fnc_status_e
DIFF_Init_Different1(
	diff_differentiator_1_s *p_s,
	diff_differentiation_1_init_struct_s *pInit_s);

extern void
DIFF_Different1_StructInit(
	diff_differentiation_1_init_struct_s *pInit_s);
/******************************************************************************/


/******************************************************************************/
//  Секция прототипов глобальных функций
/******************************************************************************/


/******************************************************************************/
//  Секция определения макросов
/******************************************************************************/
#endif /* LIB_A_DIFF_DIFFERENTIATORS_H_ */

////////////////////////////////////////////////////////////////////////////////
//  END OF FILE
////////////////////////////////////////////////////////////////////////////////
